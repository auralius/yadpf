% Auralius Manurung
% ME - Universitas Pertamina
% 2021
%
% The Time-Optimal van der Pol Equation
%
% Kaya, C. Y., & Noakes, J. L. (2003). Computational Method for 
% Time-Optimal Switching Control. Journal of Optimization Theory and 
% Applications, 117(1), 69â€“92. https://doi.org/10.1023/A:1023600422807
%

clear
close all
clc

global Ts;

% Define the Dubin's car parameters
R = 1;

% Setup the states and the inputs
X1 = ( -3   : 0.01 : 2)';
X2 = ( -4   : 0.01 : 2)';
U  = [-1 0 1]';

% Setup the horizon
Ts = 0.1;            % Temporal discretization step
Tf = 5;              % 
t = 0:Ts:Tf;
n_horizon = length(t);

% Initiate the solver
dps = dps_2X_1U(X1, X2, U, n_horizon, @state_update_fn, @stage_cost_fn, ...
                @terminal_cost_fn);

% Extract meaningful results
dps = trace_2X_1U(dps, 1.0, 1.0);

% Do plotting here
plot_2X_1U(dps, '--d');

% Additional plotting
figure
plot(dps.x1_star, dps.x2_star, '-o', 'LineWidth', 2);
xlabel('x_1', 'Interpreter','latex')
ylabel('x_2', 'Interpreter','latex')
axis equal


%%
function [x_next, y_next, theta_ne] = state_update_fn(x, y, theta, omega)
global Ts;

x_next = Ts.*cos(theta)+x;
y_next = Ts.*sin(theta)+y;
theta_next = Ts.*omega+theta;
end

%%
function J = stage_cost_fn(x, y, theta, omega, k)
global Ts;

J = Ts*ones(size(omega));
end

%%
function J = terminal_cost_fn(x, y, theta)
% Weighting factors
r = 100;

% Final states
xf = 1;
yf = -1;
thetaf = -pi/2; 

% Calculate the cost
J = r.*(x-xf).^2 + r.*(y-yf).^2 + r.*(theta-thetaf).^2;
end